// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: subject.proto

package subject

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SubjectService service

func NewSubjectServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SubjectService service

type SubjectService interface {
	FindSubjects(ctx context.Context, in *SubjectsRequest, opts ...client.CallOption) (*SubjectsResponse, error)
	FindSubject(ctx context.Context, in *SubjectRequest, opts ...client.CallOption) (*SubjectResponse, error)
	ImportSubject(ctx context.Context, in *ImportRequest, opts ...client.CallOption) (*ImportResponse, error)
	ModifySubject(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteSubject(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...client.CallOption) (*GetSubjectsResponse, error)
}

type subjectService struct {
	c    client.Client
	name string
}

func NewSubjectService(name string, c client.Client) SubjectService {
	return &subjectService{
		c:    c,
		name: name,
	}
}

func (c *subjectService) FindSubjects(ctx context.Context, in *SubjectsRequest, opts ...client.CallOption) (*SubjectsResponse, error) {
	req := c.c.NewRequest(c.name, "SubjectService.FindSubjects", in)
	out := new(SubjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectService) FindSubject(ctx context.Context, in *SubjectRequest, opts ...client.CallOption) (*SubjectResponse, error) {
	req := c.c.NewRequest(c.name, "SubjectService.FindSubject", in)
	out := new(SubjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectService) ImportSubject(ctx context.Context, in *ImportRequest, opts ...client.CallOption) (*ImportResponse, error) {
	req := c.c.NewRequest(c.name, "SubjectService.ImportSubject", in)
	out := new(ImportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectService) ModifySubject(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "SubjectService.ModifySubject", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectService) DeleteSubject(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "SubjectService.DeleteSubject", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectService) GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...client.CallOption) (*GetSubjectsResponse, error) {
	req := c.c.NewRequest(c.name, "SubjectService.GetSubjects", in)
	out := new(GetSubjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubjectService service

type SubjectServiceHandler interface {
	FindSubjects(context.Context, *SubjectsRequest, *SubjectsResponse) error
	FindSubject(context.Context, *SubjectRequest, *SubjectResponse) error
	ImportSubject(context.Context, *ImportRequest, *ImportResponse) error
	ModifySubject(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteSubject(context.Context, *DeleteRequest, *DeleteResponse) error
	GetSubjects(context.Context, *GetSubjectsRequest, *GetSubjectsResponse) error
}

func RegisterSubjectServiceHandler(s server.Server, hdlr SubjectServiceHandler, opts ...server.HandlerOption) error {
	type subjectService interface {
		FindSubjects(ctx context.Context, in *SubjectsRequest, out *SubjectsResponse) error
		FindSubject(ctx context.Context, in *SubjectRequest, out *SubjectResponse) error
		ImportSubject(ctx context.Context, in *ImportRequest, out *ImportResponse) error
		ModifySubject(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteSubject(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		GetSubjects(ctx context.Context, in *GetSubjectsRequest, out *GetSubjectsResponse) error
	}
	type SubjectService struct {
		subjectService
	}
	h := &subjectServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SubjectService{h}, opts...))
}

type subjectServiceHandler struct {
	SubjectServiceHandler
}

func (h *subjectServiceHandler) FindSubjects(ctx context.Context, in *SubjectsRequest, out *SubjectsResponse) error {
	return h.SubjectServiceHandler.FindSubjects(ctx, in, out)
}

func (h *subjectServiceHandler) FindSubject(ctx context.Context, in *SubjectRequest, out *SubjectResponse) error {
	return h.SubjectServiceHandler.FindSubject(ctx, in, out)
}

func (h *subjectServiceHandler) ImportSubject(ctx context.Context, in *ImportRequest, out *ImportResponse) error {
	return h.SubjectServiceHandler.ImportSubject(ctx, in, out)
}

func (h *subjectServiceHandler) ModifySubject(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.SubjectServiceHandler.ModifySubject(ctx, in, out)
}

func (h *subjectServiceHandler) DeleteSubject(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.SubjectServiceHandler.DeleteSubject(ctx, in, out)
}

func (h *subjectServiceHandler) GetSubjects(ctx context.Context, in *GetSubjectsRequest, out *GetSubjectsResponse) error {
	return h.SubjectServiceHandler.GetSubjects(ctx, in, out)
}
